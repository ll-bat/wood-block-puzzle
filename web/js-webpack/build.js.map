{"version":3,"sources":["webpack://project-webpack/./src/Helper/relax/BoxOnboardCrasher.js","webpack://project-webpack/./src/app.js","webpack://project-webpack/./src/core/abstract/Configurable.js","webpack://project-webpack/./src/core/abstract/DomNegotiatorAbstract.js","webpack://project-webpack/./src/core/abstract/ErrorHandler.js","webpack://project-webpack/./src/core/abstract/EventHandler.js","webpack://project-webpack/./src/core/abstract/MultipleNextHandlers.js","webpack://project-webpack/./src/core/abstract/NextHandler.js","webpack://project-webpack/./src/core/abstract/Styler.js","webpack://project-webpack/./src/core/animation/BlockCrashAnimation.js","webpack://project-webpack/./src/core/components/Component.js","webpack://project-webpack/./src/core/drawer/Layout.js","webpack://project-webpack/./src/core/drawer/concrete/relax/RandomFiguresDrawer.js","webpack://project-webpack/./src/core/drawer/figures/FigureDrawer.js","webpack://project-webpack/./src/core/drawer/figures/Figures.js","webpack://project-webpack/./src/core/drawer/figures/leaves/AllFigures.js","webpack://project-webpack/./src/core/drawer/figures/leaves/Figure.js","webpack://project-webpack/./src/core/events/DefaultEvents.js","webpack://project-webpack/./src/core/events/Events.js","webpack://project-webpack/./src/core/events/FigureMover.js","webpack://project-webpack/./src/core/events/next_handler/FigureOnBoardMatcher.js","webpack://project-webpack/./src/core/events/next_handler/relax/AfterRandomFigurePutOnBoardHandler.js","webpack://project-webpack/./src/core/events/next_handler/relax/BoxUpdateHandler.js","webpack://project-webpack/./src/core/events/next_handler/relax/GameStateChecker.js","webpack://project-webpack/./src/core/events/next_handler/relax/MouseUpHandler.js","webpack://project-webpack/./src/core/events/next_handler/relax/RandomFigureEventHelper.js","webpack://project-webpack/./src/core/events/next_handler/relax/RandomFigureOnBoardChecker.js","webpack://project-webpack/./src/core/logic/FigurePlaceChecker.js","webpack://project-webpack/./src/core/logic/FigurePlaceFinder.js","webpack://project-webpack/./src/core/math/Calculator.js","webpack://project-webpack/./src/core/middlewares/Middleware.js","webpack://project-webpack/./src/core/middlewares/RandomFigureClickerMiddleWare.js","webpack://project-webpack/./src/general/Android.js","webpack://project-webpack/./src/general/Constants.js","webpack://project-webpack/./src/general/Custom.js","webpack://project-webpack/./src/leaves/RandomFigure.js","webpack://project-webpack/./src/negotiators/DomNegotiator.js","webpack://project-webpack/./src/shared/store/Boxes.js","webpack://project-webpack/./src/shared/store/Config.js","webpack://project-webpack/./src/shared/store/leaves/Box.js","webpack://project-webpack/./src/shared/store/leaves/State.js","webpack://project-webpack/./src/shared/store/tmp/TmpFigureHelper.js","webpack://project-webpack/../webpack/src/shared/android.js","webpack://project-webpack/../webpack/src/shared/constants.js","webpack://project-webpack/../webpack/src/shared/store/config.js","webpack://project-webpack/webpack/bootstrap","webpack://project-webpack/webpack/runtime/define property getters","webpack://project-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://project-webpack/webpack/runtime/make namespace object","webpack://project-webpack/webpack/startup"],"names":[],"mappings":"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AACA;AACA;AACA,2BAA2B,uDAAU;AACrC,4BAA4B,uDAAU;AACtC,+BAA+B,mDAAM;;AAErC;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA,sBAAsB;AACtB;AACA,sCAAsC;AACtC;AACA;AACA,mBAAmB,uDAAkB;AACrC,SAAS;AACT,sCAAsC,KAAK;AAC3C;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;ACxDxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,UAAU,E;;;;;;;;;;;;;;;;ACnG6B;AACR;;AAE/B;AACf;AACA,oBAAoB;AACpB,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,kEAAoB;AAC7C;AACA,uBAAuB,OAAO;AAC9B,2BAA2B,cAAc;AACzC;AACA,8BAA8B,0DAAU;AACxC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA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CA;AACA,KAAK;;AAEL;AACA,0BAA0B;AAC1B,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;;AAEL;AACA,0BAA0B;AAC1B,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,kBAAkB,iEAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI,E;;;;;;;;;;;;;;;ACpE0B;;AAE9B,2BAA2B,0DAAM;AAChD,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,cAAc;AAClC;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,aAAa;AACjC;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;AC1CqC;AACsC;AAC9B;;AAE9B,4BAA4B,yEAAqB;AAChE;AACA,cAAc;AACd;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB,sDAAM;AAC5B;AACA,sBAAsB,wDAAQ;AAC9B,YAAY,uEAAyB;AACrC;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;;ACrD+B;AACqB;AACQ;AACd;;AAE9C,oBAAoB,gEAAY;AAChC;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA,gBAAgB,gDAAG,EAAE,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA,4BAA4B;AAC5B,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO,gBAAgB;AACvD;AACA;AACA,oBAAoB,gEAAgB;AACpC;AACA;;AAEA,wCAAwC,mEAAiB;AACzD,wCAAwC,mEAAiB,SAAS,SAAS,qBAAqB;AAChG;AACA;AACA,aAAa;AACb,SAAS;;AAET,4BAA4B,qEAAmB;AAC/C,4BAA4B,qEAAmB,SAAS;AACxD;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iEAAe,MAAM,E;;;;;;;;;;;;;;;ACtHuB;;AAE5C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,qDAAO;AACnB;AACA,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA,KAAK;AACL;AACA,YAAY,qDAAO;AACnB,oBAAoB;AACpB;AACA,gBAAgB;AAChB,KAAK;AACL;AACA,YAAY,qDAAO;AACnB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,qDAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,MAAM,E;;;;;;;;;;;;;;;AC/CsB;;AAE5B;AACf,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA,QAAQ,6DAAa;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;AC1D2C;AACa;;AAExD;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,yBAAyB,OAAO;AAChC,+BAA+B;AAC/B,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,+BAA+B;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,8BAA8B;AAC9B,yBAAyB;AACzB;AACA,yBAAyB,4BAA4B;AACrD,wCAAwC,yDAAY,EAAE,4BAA4B;AAClF,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB;AACtB;AACA;AACA,YAAY,6DAAa,8BAA8B,sBAAsB;AAC7E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,iEAAe,KAAK,E;;;;;;;;;;;;;;;;;;AC3EwC;AACG;AACpB;AACb;;AAE9B,8BAA8B,+DAAa;AAC3C;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA,2BAA2B,sEAAa,gBAAgB,cAAc;AACtE;;AAEA,oBAAoB,+CAAU;;AAE9B,QAAQ,6DAAa;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,iEAAe,gBAAgB,E;;;;;;;;;;;;;;AC1B/B;AACA;;AAEA,iEAAe,OAAO,E;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHa;;AAE5B;AACA,cAAc,iEAAqB;AACnC,eAAe,kEAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACA;AACA,wB;;;;;;;;;;;;;;;ACxByB;;AAEhC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,6CAAO;AACnB;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA,KAAK;AACL;AACA,YAAY,6CAAO;AACnB,oBAAoB;AACpB;AACA,gBAAgB;AAChB,KAAK;AACL;AACA,YAAY,6CAAO;AACnB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,6CAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,MAAM,E;;;;;;UC/CrB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"build.js","sourcesContent":["import CONSTANTS from \"../../general/Constants\";\nimport $boxes from \"../../shared/store/Boxes\";\nimport $blockCrashAnimation from \"../../core/animation/BlockCrashAnimation\";\n\nclass BoxOnboardCrasher {\n    constructor() {\n        this.reset();\n    }\n\n    reset() {\n        this.boxesOnRow = [];\n        this.boxesOnColumn = [];\n\n        for (let i = 0; i < CONSTANTS.boxesOnRow; i++) {\n            this.boxesOnRow.push(0);\n        }\n\n        for (let i = 0; i < CONSTANTS.boxesOnRow; i++) {\n            this.boxesOnColumn.push(0);\n        }\n    }\n\n    update({ x, y }) {\n        this.boxesOnRow[x]++;\n        this.boxesOnColumn[y]++;\n    }\n\n    checkBlocksToCrash() {\n        let crashBlocks = false;\n\n        for (let i = 0; i < CONSTANTS.boxesOnRow; i++) {\n            if (this.boxesOnRow[i] === CONSTANTS.boxesOnRow) {\n                crashBlocks = true;\n            }\n        }\n\n        for (let j = 0; j < CONSTANTS.boxesOnRow; j++) {\n            if (this.boxesOnColumn[j] === CONSTANTS.boxesOnColumn) {\n                crashBlocks = true;\n            }\n        }\n\n        if (crashBlocks) {\n            this.crashBlocks();\n        }\n    }\n\n    crashBlocks() {\n        const rowIndexesToCrash = [];\n        const columnIndexesToCrash = [];\n        this.boxesOnRow.forEach((numberOfBlocks, rowIndex) => {\n            if (numberOfBlocks === CONSTANTS.boxesOnRow) {\n                rowIndexesToCrash.push(rowIndex);\n            }\n        });\n\n        this.boxesOnColumn.forEach((numberOfBlocks, columnIndex) => {\n            if (numberOfBlocks === CONSTANTS.boxesOnColumn) {\n                columnIndexesToCrash.push(columnIndex);\n            }\n        });\n\n        // console.log('Crashing');\n        // console.log(rowIndexesToCrash);\n        // console.log(columnIndexesToCrash);\n\n        rowIndexesToCrash.forEach(rowIndex => {\n            for (let j = 0; j < CONSTANTS.boxesOnColumn; j++) {\n                const box = $boxes.get(rowIndex, j);\n                box.style({ background: CONSTANTS.boxDefaultColor });\n                $blockCrashAnimation.animateCrash(box);\n                box.setBusy(false);\n            }\n\n            this.boxesOnRow[rowIndex] = 0;\n            for (let j = 0; j< CONSTANTS.boxesOnRow; j++) {\n                this.boxesOnColumn[j]--;\n            }\n        });\n\n        columnIndexesToCrash.forEach(columnIndex => {\n            for (let i = 0; i < CONSTANTS.boxesOnRow; i++) {\n                const box = $boxes.get(i, columnIndex);\n                box.style({ background: CONSTANTS.boxDefaultColor });\n                $blockCrashAnimation.animateCrash(box);\n                box.setBusy(false);\n            }\n\n            this.boxesOnColumn[columnIndex] = 0;\n            for (let i = 0; i < CONSTANTS.boxesOnColumn; i++) {\n                if (this.boxesOnRow[i] > 0) {\n                    this.boxesOnRow[i]--;\n                }\n            }\n        });\n    }\n}\n\nconst $boxOnboardCrasher = new BoxOnboardCrasher();\nexport default $boxOnboardCrasher;","import $layout from \"./core/drawer/Layout\";\nimport DomNegotiator from \"./negotiators/DomNegotiator\";\nimport $randomFigureDrawer from \"./core/drawer/concrete/relax/RandomFiguresDrawer\";\nimport $figureMover from \"./core/events/FigureMover\";\nimport $figureOnBoardMatcher from \"./core/events/next_handler/FigureOnBoardMatcher\";\nimport $mouseUpHandler from \"./core/events/next_handler/relax/MouseUpHandler\";\nimport RandomFigureEventHelper from \"./core/events/next_handler/relax/RandomFigureEventHelper\";\nimport $boxes from \"./shared/store/Boxes\";\nimport EVENTS from \"./core/events/Events\";\nimport $boxUpdateHandler from \"./core/events/next_handler/relax/BoxUpdateHandler\";\nimport $afterRandomFigurePutOnBoardHandler from \"./core/events/next_handler/relax/AfterRandomFigurePutOnBoardHandler\";\nimport $randomFigureOnBoardChecker from \"./core/events/next_handler/relax/RandomFigureOnBoardChecker\";\nimport $randomFigureClickerMiddleWare from \"./core/middlewares/RandomFigureClickerMiddleWare\";\nimport $gameStateChecker from \"./core/events/next_handler/relax/GameStateChecker\";\n\n$layout.setup(new DomNegotiator('#content'));\n$layout.draw();\n\n$figureMover.registerHandler('mousemove', $figureOnBoardMatcher);\n$figureMover.registerHandler('mouseup', $mouseUpHandler);\n$figureMover.registerHandler('mouseup', $randomFigureOnBoardChecker);\n$figureMover.addMiddleware(EVENTS.BEFORE_MOUSE_DOWN ,$randomFigureClickerMiddleWare);\n$figureMover.afterClick($gameStateChecker);\n// $figureMover.registerHandler(EVENTS.BEFORE_FIGURE_CLICK, $randomFigureClicker, false);\n\n$randomFigureDrawer.setup(new DomNegotiator('#figures'));\nRandomFigureEventHelper.drawRandomFiguresAndRegisterEvents();\n\n$boxes.registerHandler(EVENTS.BOX_UPDATE, $boxUpdateHandler);\n$boxes.registerHandler(EVENTS.BOARD_CHANGE, $afterRandomFigurePutOnBoardHandler);","import ErrorHandler from \"./ErrorHandler\";\n\nexport default class Configurable extends ErrorHandler {\n    /**\n     * @param params {Object} list of `key => value` pairs representing configuration of the current class\n     */\n    configure(params) {\n        for (let a in params) {\n            this[a] = params[a];\n        }\n    }\n}","import FUNC from \"../../general/Custom\";\n\nexport default class DomNegotiatorAbstract {\n\n}","\nexport default class ErrorHandler {\n    log(...messages) {\n        console.log(...messages);\n    }\n\n    error(message) {\n        throw new DOMException(message);\n    }\n}","import MultipleNextHandlers from \"./MultipleNextHandlers\";\nimport NextHandler from \"./NextHandler\";\nimport DefaultEvents from \"../events/DefaultEvents\";\n\nexport default class EventHandler extends DefaultEvents {\n    constructor() {\n        super();\n        this._handlers = {}\n    }\n    /**\n     * @param $mouseEvent {String}\n     * @param $nextHandler {NextHandler}\n     * @param $multiple {Boolean}\n     */\n    registerHandler($mouseEvent, $nextHandler, $multiple = true) {\n        if (!($nextHandler instanceof NextHandler)) {\n            throw new DOMException($nextHandler + ' should be an instance of NextHandler::class')\n        }\n\n        let thisHandlers;\n        if ($multiple) {\n            thisHandlers = this._handlers[$mouseEvent];\n            if (!thisHandlers) {\n                thisHandlers = [];\n            }\n\n            thisHandlers.push($nextHandler);\n        } else {\n            thisHandlers = $nextHandler;\n        }\n\n        this._handlers[$mouseEvent] = thisHandlers;\n    }\n\n    /**\n     * @param $mouseEvent\n     * @param $multiple {Boolean}\n     * @return {NextHandler}\n     */\n    getHandler($mouseEvent, $multiple = true) {\n        if (this.hasHandler($mouseEvent)) {\n            const handlers = this._handlers[$mouseEvent];\n            if ($multiple) {\n                return new MultipleNextHandlers(handlers);\n            } else {\n                if (!(handlers instanceof NextHandler)) {\n                    throw new DOMException('There are more than 1 or 0 event handlers for event ' + $mouseEvent);\n                }\n\n                return handlers;\n            }\n        }\n        throw new DOMException($mouseEvent + ' handler has not been registered');\n    }\n\n    hasHandler($mouseEvent) {\n        return this._handlers[$mouseEvent] != null;\n    }\n}","import NextHandler from \"./NextHandler\";\n\nexport default class MultipleNextHandlers extends NextHandler {\n    constructor(handlers) {\n        super();\n        /**\n         * @type {NextHandler[]}\n         */\n        this.handlers = handlers;\n    }\n\n    /**\n     * @param e\n     * @param figure\n     * @param extraData\n     */\n    next(e, figure, extraData = {}) {\n        for (const handler of this.handlers) {\n            handler.next(e, figure, extraData);\n        }\n    }\n}","import Configurable from \"./Configurable\";\n\nexport default class NextHandler extends Configurable {\n    constructor() {\n        super();\n    }\n\n    next(e, figure, extraData = {}) {}\n}","import FUNC from \"../../general/Custom\";\nimport ErrorHandler from \"./ErrorHandler\";\n\nexport default class Styler extends ErrorHandler {\n    style($style) {\n        const divElement = this.getDivElement();\n        if (!divElement) {\n            this.log(divElement);\n            this.error('Setting style on null');\n        }\n\n        FUNC.setStyle(divElement, $style);\n    }\n\n    getDivElement() {}\n}","import FUNC from \"../../general/Custom\";\nimport CONSTANTS from \"../../general/Constants\";\n\nclass BlockCrashAnimation {\n    async animateCrash({ x, y }) {\n        await this.run(\n            this.draw({ x, y }), { x, y }\n        )\n    }\n\n    draw({ x, y }) {\n        let el = FUNC.elt('div', null, null, {\n            position: 'absolute',\n            left: x + 'px',\n            top: y + 'px',\n            width: CONSTANTS.boxWidth + 'px',\n            height: CONSTANTS.boxHeight + 'px',\n            background: CONSTANTS.blockCrashColor,\n            border: '2px inset black',\n        })\n\n        CONSTANTS.dom.body.append(el)\n        return el\n    }\n\n    async run(el, boxCoordinates) {\n        await this.parabolicCurve(el, boxCoordinates)\n    }\n\n    async parabolicCurve(el, { x, y }) {\n        const steps = 55\n        const clockWise = Math.random() > .5 ? 1 : -1\n        const endX = 20\n        const xPerStep = (endX / steps)\n        let currentStep = steps\n        let currentX = 0\n        let currentY = calcY(currentX)\n        let currentOpacity = 1\n        let currentScale = 1\n        const addX = 100 * clockWise;\n        const addY = Math.random() * 100;\n        let posX = 0;\n        let posY = 0;\n        const perStep = 1 / steps\n        let degree = 0;\n        const degPerStep = 6 * clockWise;\n\n        while (currentStep--) {\n            FUNC.setStyle(el, {\n                left: currentX + posX + x + 'px',\n                top: currentY + posY + y + 'px',\n                transform: `\n                    scale(${currentScale}) \n                    rotate(${degree}deg)\n                   `,\n                opacity: currentOpacity\n            })\n            currentX += clockWise * xPerStep * (Math.sin(currentStep / steps) * 1.6 + .2)\n            currentY = calcY(currentX)\n            currentOpacity -= perStep\n            currentScale -= perStep / 2\n            posX = addX * Math.cos(currentStep / steps)\n            posY = addY * Math.cos(currentStep / steps)\n            degree += degPerStep * Math.cos(currentStep / steps)\n            await this.wait(10)\n        }\n\n        function calcY(x) {\n            return 1.46 * x * x + 10\n        }\n\n        el.remove()\n    }\n\n    async withTransform(el) {\n        const steps = 150\n        const clockWise = Math.random() > .5 ? 1 : -1\n        const startDegree = -90 + clockWise * 85\n        const endDegree = startDegree + clockWise * (Math.random() * 30 + 20)\n        const degreePerStep = clockWise * (Math.abs(endDegree - startDegree) / steps)\n        const distPerStep = 1.5\n        const perStep = 1 / steps\n        let currentDegree = startDegree;\n        let currentDist = distPerStep\n        let currentStep = steps\n        let currentOpacity = 1\n        let currentScale = 1\n\n        while (currentStep--) {\n            FUNC.setStyle(el, {\n                transform: `\n                       rotate(${currentDegree}deg)\n                       translateX(${currentDist}px)\n                       scale(${currentScale})\n                    `,\n                opacity: currentOpacity\n            })\n            currentDegree += degreePerStep\n            currentDist += distPerStep * Math.sin(currentStep / steps) * 2\n            currentOpacity -= perStep\n            currentScale -= perStep / 2\n            await this.wait(2)\n        }\n\n        el.remove()\n    }\n\n    wait(time) {\n        return new Promise((res) => {\n            setTimeout(() => {\n                res()\n            }, time)\n        })\n    }\n}\n\nconst $blockCrashAnimation = new BlockCrashAnimation()\nexport default $blockCrashAnimation;","import Middleware from \"../middlewares/Middleware\";\n\nexport default class Component extends Middleware {\n\n}","import $boxes from \"../../shared/store/Boxes\";\nimport CONSTANTS from \"../../general/Constants\";\nimport FUNC from \"../../general/Custom\";\n\nclass Layout {\n    /**\n     * @type {DomNegotiator}\n     * @var _domNegotiator\n     */\n\n    constructor() {\n        this._domNegotiator = null;\n    }\n\n    /**\n     * @param layoutNegotiator {DomNegotiator}\n     */\n    setup(layoutNegotiator) {\n        this._domNegotiator = layoutNegotiator;\n    }\n\n    draw() {\n        this.initBoxes()\n        this.drawLayout();\n        this.customizeBoardSize();\n    }\n\n    customizeBoardSize($height = null) {\n        if (!$height) {\n            $height = (CONSTANTS.boxHeight + 3) * CONSTANTS.boxesOnColumn;\n            $height += FUNC.$('#site-navbar').offsetHeight;\n            $height += 30;\n            if ($height > CONSTANTS.height) {\n                $height = CONSTANTS.height - 100;\n            }\n\n            FUNC.setStyle(this._domNegotiator.getElement(), {\n                height: $height + 'px'\n            });\n        } else {\n            console.log('all done');\n        }\n    }\n\n    initBoxes() {\n        $boxes.reset()\n\n        for (let i = 0; i < CONSTANTS.boxesOnColumn; i++) {\n            $boxes.addRow();\n\n            for (let j = 0; j < CONSTANTS.boxesOnRow; j++) {\n                let x = j * (CONSTANTS.boxWidth + 1) + CONSTANTS.offsetX\n                let y = i * (CONSTANTS.boxHeight + 1) +CONSTANTS.offsetY\n\n                $boxes.addAt(i, { x, y });\n            }\n        }\n    }\n\n    drawLayout() {\n        this._domNegotiator.clearHtml();\n\n        for (let i = 0; i < CONSTANTS.boxesOnColumn; i++) {\n            for (let j = 0; j < CONSTANTS.boxesOnRow; j++) {\n                const box = $boxes.get(i,j);\n                this.drawOneBlock(box)\n            }\n        }\n    }\n\n    /**\n     * @param box {Box}\n     */\n    drawOneBlock(box) {\n        let el = FUNC.elt('div', \"box\", null, {\n            position: 'absolute',\n            width: (CONSTANTS.boxWidth) + \"px\",\n            height: (CONSTANTS.boxHeight) + \"px\",\n            left: box.getCoordinateX() + 'px',\n            top: box.getCoordinateY() + 'px',\n            background: CONSTANTS.boxDefaultColor, //rgba(0,0,0,.02)\n            border: '2px solid black' //1px solid rgba(0,0,0,.051)\n        })\n\n        el.onmousedown = (e) => e.preventDefault()\n\n        this._domNegotiator.append(el)\n        box.setReferenceDiv(el);\n    }\n}\n\nconst $layout = new Layout();\nexport default $layout;","import AllFigures from \"../../figures/leaves/AllFigures\";\nimport $figures from \"../../figures/Figures\";\nimport STATE from \"../../../../shared/store/leaves/State\";\n\nclass RandomFiguresDrawer {\n    constructor() {\n    }\n\n    /**\n     * @param domNegotiator {DomNegotiator}\n     */\n    setup(domNegotiator) {\n        this._domNegotiator = domNegotiator;\n    }\n\n    draw($figuresCount = 3) {\n        this.ensureProperties();\n\n        const keys = Object.keys(AllFigures);\n        const figuresLength = keys.length;\n\n        for (let i = 0; i < $figuresCount; i++) {\n            const randomNumber = this.getRandomNumber(figuresLength);\n            const figure = keys[randomNumber];\n            const divElement = $figures.draw(figure);\n            STATE.relax.addRandomFigure({ figure, divElement, index: i });\n            this._domNegotiator.append(divElement);\n        }\n    }\n\n    getRandomNumber($lessThan = 1e9, $moreThan = 0) {\n        const diff = $lessThan - $moreThan;\n        let randNumber = Math.floor(Math.random() * diff);\n        if (randNumber === diff) {\n            randNumber--;\n        }\n\n        randNumber += $moreThan;\n        return randNumber;\n    }\n\n    ensureProperties() {\n        const isOk = this._domNegotiator != null;\n        if (!isOk) {\n            throw new DOMException('Please specify the DomNegotiator for RandomFigureDrawer');\n        }\n    }\n\n}\n\nconst $randomFigureDrawer = new RandomFiguresDrawer();\nexport default $randomFigureDrawer;","import CONSTANTS from \"../../../general/Constants\";\nimport FUNC from \"../../../general/Custom\";\nimport Figure from \"./leaves/Figure\";\n\n\nclass FigureDrawer {\n    /**\n     * @param figureObjOrPattern {Figure|Array}\n     * @param scaleK\n     * @param $style {object}\n     */\n    draw(figureObjOrPattern, scaleK = 3, $style = {}) {\n        if (figureObjOrPattern instanceof Figure) {\n            figureObjOrPattern = figureObjOrPattern.pattern;\n        }\n\n        let boxDiv = FUNC.elt(\"div\", \"box\", null, {\n            position: \"relative\",\n            userSelect: 'none',\n        });\n\n        const bw = CONSTANTS.boxWidth / scaleK;\n        const bh = CONSTANTS.boxHeight / scaleK;\n\n        this.drawFigureWithDetails(figureObjOrPattern, bw, bh, boxDiv, $style);\n        return boxDiv;\n    }\n\n    /**\n     *\n     * @param pattern {Array} the figure pattern\n     * @param bw width of the one block\n     * @param bh height of the one block\n     * @param parentDiv {HTMLDivElement} parent div where each blocked should be appended\n     * @param style {Object} extra style for each block\n     */\n    drawFigureWithDetails(pattern, bw, bh, parentDiv, style = {}) {\n        pattern.forEach((r, i) => {\n            r.forEach((c, j) => {\n                if (pattern[i][j] !== \".\") {\n                    let l = j * (bw + 3);\n                    let t = i * (bh + 3);\n\n                    let el = FUNC.elt(\"div\", null, null, {\n                        top: t + \"px\",\n                        left: l + \"px\",\n                        width: bw + \"px\",\n                        height: bh + \"px\",\n                        background: CONSTANTS.boxColor,\n                        position: \"absolute\",\n                    })\n\n                    FUNC.setStyle(el, style)\n                    parentDiv.append(el);\n                }\n            })\n        })\n    }\n}\n\nconst $figureDrawer = new FigureDrawer();\nexport default $figureDrawer;","import Figure from \"./leaves/Figure\";\nimport AllFigures from \"./leaves/AllFigures\";\nimport $figureDrawer from \"./FigureDrawer\";\n\nclass Figures {\n    /**\n     * @type {Array}\n     * @var allFigures\n     */\n\n    constructor() {\n        this.allFigures = [];\n        /**\n         * TYPE_1: new Figure(pattern),\n         * TYPE_2: new Figure(pattern),\n         * ...\n         */\n        for (let figure in AllFigures) {\n            const pattern = AllFigures[figure].figure;\n            this[figure] = new Figure(figure, pattern);\n\n            this.allFigures.push({\n                name: figure,\n                figure: pattern\n            });\n        }\n    }\n\n    /**\n     * @param type {string}\n     * @param scaleK\n     * @param $style {object}\n     */\n    draw(type, scaleK = 3, $style = {}) {\n        if (this.hasFigure(type)) {\n            const figureObj = this.getFigure(type);\n            return $figureDrawer.draw(figureObj, scaleK, $style);\n        } else {\n            throw new DOMException(`${type} figure does not exist`);\n        }\n    }\n\n    hasFigure(type) {\n        return this[type] !== null;\n    }\n\n    /**\n     * @param type {string}\n     * @return {Figure}\n     */\n    getFigure(type) {\n        return this[type];\n    }\n}\n\nconst $figures = new Figures();\nexport default $figures;\n\n","const AllFigures = {\n    TYPE_1: {\n        figure: `\n               ###\n               #\n               #\n             `,\n        name: 'TYPE_1'\n    },\n\n    TYPE_2: {\n        figure: `\n               ##\n               ##\n             `,\n        name: 'TYPE_2'\n    },\n\n    TYPE_3: {\n        figure: `\n               ##\n               #\n             `,\n        name: 'TYPE_3'\n    },\n\n    TYPE_4: {\n        figure: `\n               ###\n             `,\n        name: 'TYPE_4'\n    },\n\n    TYPE_5: {\n        figure: `\n               #\n               #\n               #\n             `,\n        name: 'TYPE_5'\n    },\n\n    TYPE_6: {\n        figure: `\n               ###\n               ###\n               ###\n             `,\n        name: 'TYPE_6'\n    },\n\n    TYPE_7: {\n        figure: `\n               #####\n             `,\n        name: 'TYPE_7'\n    },\n\n    TYPE_8: {\n        figure: `\n               ####\n             `,\n        name: 'TYPE_8'\n    },\n\n    TYPE_9: {\n        figure: `\n               #\n               #\n               #\n               #\n             `,\n        name: 'TYPE_9'\n    },\n\n    TYPE_11: {\n        figure: `\n              .#\n              ##\n             `,\n        name: 'TYPE_11'\n    },\n\n    TYPE_12: {\n        figure: `\n            # \n            #\n           `,\n        name: 'TYPE_12'\n    },\n\n    TYPE_13: {\n        figure: `\n          ##          \n         `,\n        name: 'TYPE_13'\n    }\n}\n\nexport default AllFigures;","import CONSTANTS from \"../../../../general/Constants\";\nimport FUNC from \"../../../../general/Custom\";\n\nexport default class Figure {\n    /**\n     * @param name {string}\n     * @param pattern {string}\n     */\n    constructor(name, pattern) {\n        this.name = name;\n\n        this.pattern = pattern.split(\"\\n\")\n            .map(c => c.trim())\n            .filter(c => c)\n            .map(c => c.split(\"\"))\n\n        this.matrix = this.pattern.map(row => {\n            return row.map(cell => {\n                return cell === '.'\n                    ? 0\n                    : 1\n            })\n        });\n    }\n\n    isset(i, j) {\n        return this.pattern[i] && this.pattern[i][j] && this.pattern[i][j] !== '.';\n    }\n\n    toString() {\n        throw new DOMException('Figure toString() method is not implemented');\n    }\n\n    toMatrix() {\n        return this.matrix;\n    }\n\n    toInt() {\n        const rowCount = CONSTANTS.boxesOnRow;\n        let result = 0;\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < rowCount; j++) {\n                if (this.isset(i, j)) {\n                    result += FUNC.power(i * rowCount + j);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * returns max number blocks on X-axis\n     */\n    getCategory() {\n       let result = 0;\n       this.pattern.forEach(arr => result = Math.max(result, arr.length));\n       return result;\n    }\n}","import ErrorHandler from \"../abstract/ErrorHandler\";\nimport NextHandler from \"../abstract/NextHandler\";\nimport EVENTS from \"./Events\";\nimport Configurable from \"../abstract/Configurable\";\n\nexport default class DefaultEvents extends Configurable {\n    constructor(props) {\n        super();\n        this.beforeClickHandlers = [];\n        this.afterClickHandlers = [];\n    }\n\n    /**\n     * @param $nextHandler {NextHandler|Boolean}\n     * @param $payload {Object}\n     */\n    beforeClick($nextHandler = false, $payload = {}) {\n        if (!$nextHandler) {\n            this.triggerNextHandlers(EVENTS.BEFORE_MOUSE_DOWN, $payload);\n        } else {\n            if (!($nextHandler instanceof NextHandler)) {\n                this.log($nextHandler);\n                this.error('$nextHandler is not an instance of NextHandler::class');\n            } else {\n                this.beforeClickHandlers.push($nextHandler);\n            }\n        }\n    }\n\n    /**\n     * @param $nextHandler {NextHandler|Boolean}\n     * @param $payload {Object}\n     */\n    afterClick($nextHandler = false, $payload = {}) {\n        if (!$nextHandler) {\n            this.triggerNextHandlers(EVENTS.AFTER_MOUSE_UP,$payload);\n        } else {\n            if (!($nextHandler instanceof NextHandler)) {\n                this.log($nextHandler);\n                this.error('$nextHandler is not an instance of NextHandler::class');\n            } else {\n                this.afterClickHandlers.push($nextHandler);\n            }\n        }\n    }\n\n    triggerNextHandlers($type, $payload) {\n        const nextHandlers = $type === EVENTS.BEFORE_MOUSE_DOWN\n            ? this.beforeClickHandlers\n            : this.afterClickHandlers;\n\n        /**\n         * @type {NextHandler}\n         */\n        for (let nextHandler of nextHandlers) {\n            nextHandler.next($payload);\n        }\n    }\n}","\nconst EVENTS = {\n    BEFORE_MOUSE_DOWN: 'before-mouse-down',\n    AFTER_MOUSE_UP: 'after-mouse-up',\n    MOUSE_DOWN : 'mouse-down',\n    MOUSE_UP : 'mouse-up',\n    MOUSE_MOVE : 'mouse-move',\n    BOX_UPDATE : 'box-update',\n    BOARD_CHANGE : 'board-change',\n    BEFORE_FIGURE_CLICK : 'before-figure-click',\n}\n\nexport default EVENTS;","import FUNC from \"../../general/Custom\";\nimport CONSTANTS from \"../../general/Constants\";\nimport $figures from \"../drawer/figures/Figures\";\nimport $tmpFigureHelper from \"../../shared/store/tmp/TmpFigureHelper\";\nimport STATE from \"../../shared/store/leaves/State\";\nimport Component from \"../components/Component\";\nimport EVENTS from \"./Events\";\n\nclass FigureMover extends Component {\n    constructor() {\n        super();\n    }\n\n    /**\n     * @param figure {String}\n     * @param divElement {HTMLElement}\n     * @param index {Number}\n     * @description all these params are coming from `STATE.relax.getFigures()[index]`\n     */\n    register({ figure, divElement, index }) {\n        let temporaryElement = null;\n        let moveHandler = null;\n\n        const mousedownHandler = e => {\n            if (!this.passesMiddlewares(EVENTS.BEFORE_MOUSE_DOWN, { figure, divElement, index })) {\n                return false;\n            }\n\n            this.beforeClick(false, { e, figure, divElement, index });\n\n            const moverFigure = this.createMoverFigure();\n            const figureDiv = $figures.draw(figure, 1.05);\n\n            moverFigure.append(figureDiv);\n            moveHandler = this.getMouseMoveHandler(figure, moverFigure);\n\n            FUNC.setStyle(moverFigure, {\n                left: this.getLeftPx(e.pageX) + 'px',\n                top: this.getTopPx(e.pageY) + 'px'\n            });\n            FUNC.setStyle(divElement, { opacity: .4 });\n\n            FUNC.attach(CONSTANTS.dom, 'mousemove', moveHandler)\n            FUNC.attach(CONSTANTS.dom, 'mouseup', mouseUpHandler);\n\n            temporaryElement = moverFigure;\n        };\n\n        const mouseUpHandler = e => {\n            if (!temporaryElement)\n                return;\n\n            FUNC.detach(CONSTANTS.dom, 'mousemove', moveHandler);\n            temporaryElement.remove();\n            $tmpFigureHelper.clearHtml();\n            FUNC.setStyle(divElement, { opacity: 1 })\n            FUNC.setStyle(divElement, { opacity: 1 });\n\n            this.getHandler('mouseup').next(e, figure, { index });\n            STATE.shared.resetDrawable();\n\n            this.afterClick(false, { e, figure, divElement, index });\n\n            // important\n            FUNC.detach(CONSTANTS.dom, 'mouseup', mouseUpHandler);\n        };\n\n        FUNC.attach(divElement, 'mousedown', mousedownHandler);\n    }\n\n    /**\n     * @param figure {String}\n     * @param divElement {HTMLElement}\n     * @return {NextHandler}\n     */\n    getMouseMoveHandler(figure, divElement) {\n        return e => {\n            const { pageX, pageY } = e;\n            FUNC.setStyle(divElement, {\n                left: this.getLeftPx(pageX) + 'px',\n                top: this.getTopPx(pageY) + 'px'\n            });\n\n            this.getHandler('mousemove').next(e, figure);\n        }\n    }\n\n    getLeftPx($left) {\n        return $left + CONSTANTS.figureOffsetX\n    }\n\n    getTopPx($top) {\n        return $top + CONSTANTS.figureOffsetY\n    }\n\n    createMoverFigure() {\n        let elem = FUNC.$('#mover-figure');\n        if (!elem) {\n            elem = FUNC.elt('div', 'position-absolute', 'mover-figure');\n            CONSTANTS.dom.body.append(elem);\n        }\n\n        return elem;\n    }\n}\n\nconst $figureMover = new FigureMover();\nexport default $figureMover;\n","import NextHandler from \"../../abstract/NextHandler\";\nimport $figurePlaceFinder from \"../../logic/FigurePlaceFinder\";\nimport $figurePlaceChecker from \"../../logic/FigurePlaceChecker\";\nimport $tmpFigureHelper from \"../../../shared/store/tmp/TmpFigureHelper\";\nimport STATE from \"../../../shared/store/leaves/State\";\n\nclass FigureOnBoardMatcher extends NextHandler {\n    constructor() {\n        super();\n    }\n\n    /**\n     * @param e {Event}\n     * @param figure {String}\n     */\n    next(e, figure) {\n        const blockIndexes = $figurePlaceFinder.find(e, figure);\n        if (blockIndexes === null) {\n            $tmpFigureHelper.clearHtml();\n        } else {\n            // console.clear();\n            if ($figurePlaceChecker.isDrawable(blockIndexes, figure)) {\n                $tmpFigureHelper.drawTmpFigure(blockIndexes, figure);\n                STATE.shared.setBlockIndexes(blockIndexes);\n                STATE.shared.setDrawable(true);\n            } else {\n                $tmpFigureHelper.clearHtml()\n                STATE.shared.setDrawable(false);\n            }\n        }\n    }\n}\n\nconst $figureOnBoardMatcher = new FigureOnBoardMatcher();\nexport default $figureOnBoardMatcher;","import NextHandler from \"../../../abstract/NextHandler\";\nimport $boxOnboardCrasher from \"../../../../Helper/relax/BoxOnboardCrasher\";\n\nclass AfterRandomFigurePutOnBoardHandler extends NextHandler {\n    constructor(props) {\n        super(props);\n    }\n\n    next(e, figure, extraData = {}) {\n        $boxOnboardCrasher.checkBlocksToCrash();\n    }\n\n}\n\nconst $afterRandomFigurePutOnBoardHandler = new AfterRandomFigurePutOnBoardHandler();\nexport default $afterRandomFigurePutOnBoardHandler;","import NextHandler from \"../../../abstract/NextHandler\";\nimport $boxes from \"../../../../shared/store/Boxes\";\nimport $boxOnboardCrasher from \"../../../../Helper/relax/BoxOnboardCrasher\";\n\nclass BoxUpdateHandler extends NextHandler {\n    constructor(props) {\n        super(props);\n    }\n\n    next(e, figure, extraData = {}) {\n        const { x, y } = extraData;\n        const box = $boxes.get(x, y);\n        box.style({ background: '#92522e' });\n        $boxOnboardCrasher.update({ x, y });\n    }\n}\n\nconst $boxUpdateHandler = new BoxUpdateHandler();\nexport default $boxUpdateHandler;","import NextHandler from \"../../../abstract/NextHandler\";\nimport STATE from \"../../../../shared/store/leaves/State\";\n\nclass GameStateChecker extends NextHandler {\n    next(e, figure, extraData = {}) {\n        const someUnlockedFigure = STATE.relax.getFigures()\n            .find(figure => !figure.isLocked());\n\n        if (!someUnlockedFigure) {\n            setTimeout(e => {\n                location.reload();\n            }, 400)\n        }\n    }\n}\n\nconst $gameStateChecker = new GameStateChecker();\nexport default $gameStateChecker;","import NextHandler from \"../../../abstract/NextHandler\";\nimport STATE from \"../../../../shared/store/leaves/State\";\nimport $boxes from \"../../../../shared/store/Boxes\";\nimport $figures from \"../../../drawer/figures/Figures\";\nimport $randomFigureDrawer from \"../../../drawer/concrete/relax/RandomFiguresDrawer\";\nimport RandomFigureEventHelper from \"./RandomFigureEventHelper\";\n\nclass MouseUpHandler extends NextHandler {\n    /**\n     * @param e {Event}\n     * @param figure {String}\n     * @param index {Number}\n     * @return {boolean}\n     */\n    next(e, figure, { index } ) {\n        if (!STATE.shared.isDrawable()) {\n            return false;\n        }\n\n        const { x, y } = STATE.shared.getBlockIndexes();\n\n        if (x === null || y === null) {\n            this.log('Error:');\n            this.log('x: ', x, 'y: ', y);\n            this.error('x or y in MouseUpHandler next() method is not in right format')\n        } else {\n            const matrix = $figures.getFigure(figure).toMatrix();\n            $boxes.updateMatrix(matrix, { x, y }, { colorBox: true })\n            STATE.relax.removeRandomFigure(figure, index);\n            if (STATE.relax.isAllFiguresDrawn()) {\n                RandomFigureEventHelper.drawRandomFiguresAndRegisterEvents();\n            }\n        }\n    }\n}\n\nconst $mouseUpHandler = new MouseUpHandler();\nexport default $mouseUpHandler;","import $randomFigureDrawer from \"../../../drawer/concrete/relax/RandomFiguresDrawer\";\nimport STATE from \"../../../../shared/store/leaves/State\";\nimport $figureMover from \"../../FigureMover\";\n\nexport default class RandomFigureEventHelper {\n    static drawRandomFiguresAndRegisterEvents() {\n        STATE.relax.clear();\n        $randomFigureDrawer.draw();\n        STATE.relax.getFigures()\n            .forEach(figureObj => $figureMover.register(figureObj));\n    }\n}","import NextHandler from \"../../../abstract/NextHandler\";\nimport STATE from \"../../../../shared/store/leaves/State\";\nimport $figures from \"../../../drawer/figures/Figures\";\nimport Calculator from \"../../../math/Calculator\";\nimport $boxes from \"../../../../shared/store/Boxes\";\n\nclass RandomFigureOnBoardChecker extends NextHandler {\n    constructor(props) {\n        super(props);\n    }\n\n    next(e, figure, extraData = {}) {\n        const randomFigures = STATE.relax.getFigures();\n        /**\n         * @type {RandomFigure[]}\n         */\n        for (const randomFigure of randomFigures) {\n            const figureName = randomFigure.getFigureName();\n            const figure = $figures.getFigure(figureName);\n            const isPlaceOnBoardForDrawingThisRandomFigure = Calculator.isMatrixMatchForAny($boxes.toMatrix(), figure.toMatrix());\n            if (!isPlaceOnBoardForDrawingThisRandomFigure) {\n                randomFigure.lock();\n            } else {\n                randomFigure.unlock();\n            }\n        }\n    }\n}\n\nconst $randomFigureOnBoardChecker = new RandomFigureOnBoardChecker();\nexport default $randomFigureOnBoardChecker;","import $boxes from \"../../shared/store/Boxes\";\nimport $figures from \"../drawer/figures/Figures\";\nimport Calculator from \"../math/Calculator\";\nimport CONSTANTS from \"../../general/Constants\";\n\nclass FigurePlaceChecker {\n    constructor() {\n    }\n\n    /**\n     * @param x block index >= 0 AND < boxesOnRow\n     * @param y block index >= 0 AND < boxesOnColumn\n     * @param figure {String} such as TYPE_1, TYPE_2\n     */\n    isDrawable({ x, y }, figure) {\n        const boardAsMatrix = $boxes.toMatrix();\n        const figureAsMatrix = $figures.getFigure(figure).toMatrix();\n        return Calculator.isMatrixMatch(boardAsMatrix, figureAsMatrix, { x, y });\n    }\n}\n\nconst $figurePlaceChecker = new FigurePlaceChecker();\nexport default $figurePlaceChecker;","import CONSTANTS from \"../../general/Constants\";\nimport $boxes from \"../../shared/store/Boxes\";\nimport {offsetY} from \"../../../../webpack/src/shared/constants\";\n\nclass FigurePlaceFinder {\n    constructor() {\n    }\n    /**\n     * @param x\n     * @param y\n     * @param figure {String} such as TYPE_1, TYPE_2\n     * @return {{x, y} | null}\n     * @description This method should find a block from (64 blocks) where we can put the `figure` (to start drawing from)\n     */\n    find({ x, y }, figure) {\n        x += CONSTANTS.figureOffsetX;\n        y += CONSTANTS.figureOffsetY;\n\n        const boxIndexes = this.goFindBox({ x, y });\n        if (boxIndexes instanceof Object) {\n            return boxIndexes\n        }\n\n        return null;\n    }\n\n    goFindBox({ x,  y }) {\n        let errorX = CONSTANTS.boxWidth / 2;\n        let errorY = CONSTANTS.boxHeight / 2;\n\n        // figure is left of board\n        if (x < CONSTANTS.offsetX - errorX) {\n            return -1;\n        }\n\n        // figure is up of board\n        if (y < offsetY - errorY) {\n            return -1;\n        }\n\n        let colX = CONSTANTS.boxesOnRow - 1, colY = CONSTANTS.boxesOnColumn - 1;\n        for (let j = 0; j < CONSTANTS.boxesOnRow; j++) {\n            const box = $boxes.get(0, j);\n            const boxCoordinateX = box.getCoordinateX();\n            if (boxCoordinateX + errorX * 1.5 >= x) {\n                colY = j;\n                break;\n            }\n        }\n\n        for (let i = 0; i < CONSTANTS.boxesOnColumn; i++) {\n            const box = $boxes.get(i, colX);\n            const boxCoordinateY = box.getCoordinateY();\n            if (boxCoordinateY + errorY * 1.5 >= y) {\n                colX = i;\n                break;\n            }\n        }\n\n        const rightLimit = $boxes.get(0,CONSTANTS.boxesOnRow - 1).getCoordinateX() + CONSTANTS.boxWidth;\n        const bottomLimit = $boxes.get(CONSTANTS.boxesOnRow - 1, 0).getCoordinateY() + CONSTANTS.boxHeight;\n\n        if (x - rightLimit > -CONSTANTS.boxWidth / 3) {\n            return -1;\n        }\n\n        if (y - bottomLimit > -CONSTANTS.boxHeight / 3) {\n            return -1;\n        }\n\n        return {\n            x: colX, y: colY\n        }\n    }\n}\n\nconst $figurePlaceFinder = new FigurePlaceFinder();\nexport default $figurePlaceFinder;","import CONSTANTS from \"../../general/Constants\";\nimport FUNC from \"../../general/Custom\";\n\nexport default class Calculator {\n    /**\n     *\n     * @param $parentMatrix {Array[]}\n     * @param $childMatrix {Array[]}\n     * @param x {Number} starting x-index in `$parentMatrix`\n     * @param y {Number} staring y-index in `$parentMatrix`\n     */\n    static isMatrixMatch($parentMatrix, $childMatrix, { x, y }) {\n        let isMatch = true;\n        $childMatrix.forEach((row, i) => {\n            if (!isMatch) return false;\n            row.forEach((cell, j) => {\n                if (Calculator.isset($childMatrix, i, j)) {\n                    if (Calculator.isset($parentMatrix, x + i, y + j)) {\n                        isMatch = false;\n                        return false;\n                    }\n                    if (x + i >= CONSTANTS.boxesOnRow || y + j >= CONSTANTS.boxesOnColumn) {\n                        isMatch = false;\n                        return false;\n                    }\n                }\n            })\n        });\n        return isMatch;\n    }\n\n    static isMatrixMatchForAny($parentMatrix, $childMatrix) {\n        for (let i = 0; i < CONSTANTS.boxesOnRow; i++) {\n            for (let j = 0; j < CONSTANTS.boxesOnColumn; j++) {\n                const ok = Calculator.isMatrixMatch($parentMatrix, $childMatrix, { x: i, y: j });\n                if (ok) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    static isset($array, $i, $j) {\n        if (!$array[$i]) {\n            return false\n        }\n\n        if (!$array[$i][$j]) {\n            return false;\n        }\n\n        return $array[$i][$j] === 1;\n    }\n\n    /**\n     * @param $string {String} such as `10111101010101010`\n     * @param $int {Number} such as `15, 254, 3033`\n     * @param $category {Number}\n     * @param $partSize {Number}\n     */\n    static matchesIntToStringPattern($string, $int, $category = CONSTANTS.boxesOnRow,  $partSize = CONSTANTS.boxesOnRow * 3) {\n        return Calculator.matchesIntToStringPatternFrom($string, $int, { x: 0, y: 0 }, $category, $partSize);\n    }\n\n    /**\n     *\n     * @param $string {String}\n     * @param $int {Number}\n     * @param x {Number}\n     * @param y {Number}\n     * @param $category {Number}\n     * @param $partSize {Number}\n     */\n    static matchesIntToStringPatternFrom($string, $int, { x, y }, $category,  $partSize = CONSTANTS.boxesOnRow * 3) {\n        const startingIndex = x * CONSTANTS.boxesOnRow + y;\n\n        // console.log(x, y, $category);\n\n        let number = 0;\n        for (let i = startingIndex; i < $partSize; i++) {\n            if ($string[i] === undefined) {\n                return false;\n            }\n\n            const char = $string[i];\n            if (char === '1') {\n                number += FUNC.power(i - startingIndex);\n            }\n        }\n\n        function isMatch() {\n            const matches = number & $int;\n            return matches === $int;\n        }\n\n        let currentCategory = x;\n        const maxCategory = CONSTANTS.boxesOnRow - $category + 1;\n\n        if ((currentCategory < maxCategory) && isMatch()) {\n            return true;\n        }\n\n        const power2to3xBoxesOnRow = FUNC.power(CONSTANTS.boxesOnRow * 3);\n        for (let i = startingIndex + 1; i < $string.length; i++) {\n            number /= 2;\n            number = Math.floor(number);\n\n            const char = $string[i];\n            if (char === '1') {\n                number += power2to3xBoxesOnRow;\n            }\n\n            if (currentCategory === CONSTANTS.boxesOnRow - 1) {\n                currentCategory = 0;\n            }\n\n            if (currentCategory++ >= maxCategory) {\n                continue;\n            }\n\n            if (isMatch()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n","import ErrorHandler from \"../abstract/ErrorHandler\";\nimport EventHandler from \"../abstract/EventHandler\";\n\nexport default class Middleware extends EventHandler {\n\n    constructor() {\n        super();\n        this.middlewares = {};\n    }\n\n    /**\n     * @param $eventType {String}\n     * @param $middleware {Middleware}\n     * @param $multiple {Boolean}\n     */\n    addMiddleware($eventType, $middleware, $multiple = true) {\n        if (!($middleware instanceof Middleware)) {\n            this.log($middleware);\n            this.error('$middleware is not an instance of Middleware::class');\n        }\n\n        if ($multiple) {\n            if (!this.middlewares[$eventType]) {\n                this.middlewares[$eventType] = [];\n            }\n            this.middlewares[$eventType].push($middleware);\n        } else {\n            this.middlewares[$eventType] = [$middleware];\n        }\n    }\n\n    passesMiddlewares($eventType, $params = {}) {\n        if (!this.middlewares[$eventType]) {\n            return true;\n        }\n\n        /**\n         * @type {Middleware}\n         */\n        for (let middleware of this.middlewares[$eventType]) {\n            if (!middleware.canPass($params)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    canPass($params = {}) {\n        return true;\n    }\n}","import Middleware from \"./Middleware\";\nimport STATE from \"../../shared/store/leaves/State\";\n\nclass RandomFigureClickerMiddleWare extends Middleware {\n    canPass($params = {}) {\n        const { index } = $params;\n        const randomFigure = STATE.relax.getRandomFigure(index);\n        return !randomFigure.isLocked();\n    }\n}\n\nconst $randomFigureClickerMiddleWare = new RandomFigureClickerMiddleWare();\nexport default $randomFigureClickerMiddleWare;","const userAgent = navigator.userAgent.toLowerCase();\nconst Android = userAgent.indexOf(\"android\") > -1;\n\nexport default Android;","import CONFIG from \"../shared/store/Config\";\n\nconst CONSTANTS = {\n    dom: document,\n    width: CONFIG.getScreenWidth() * .9,\n    height: CONFIG.getScreenHeight(),\n    offsetY: CONFIG.getScreenHeight() * 0.1 + 20,\n    boxesOnRow: 8,\n    boxesOnColumn: 8,\n    figureOffsetX: -30,\n    figureOffsetY: -60,\n    boxDefaultColor: '#1E1E1E',\n    boxColor: 'rgba(153, 93, 93)',\n    blockCrashColor: 'rgb(151, 96, 96)',\n    boxHeight: null,\n    boxWidth: null,\n    offsetX: null,\n};\n\n\nlet offsetVar = 0;\nlet boxHeightVar = (CONSTANTS.height * .7) / CONSTANTS.boxesOnColumn;\nlet boxWidthVar = (CONSTANTS.width - offsetVar) / CONSTANTS.boxesOnRow;\nboxWidthVar = boxHeightVar = Math.min(boxWidthVar, boxHeightVar);\n\nlet rightOffsetX = offsetVar + CONSTANTS.boxesOnRow * boxWidthVar\nrightOffsetX = CONSTANTS.width - rightOffsetX;\noffsetVar = (offsetVar + rightOffsetX) / 2 + 20;\n\nCONSTANTS.boxHeight = boxHeightVar;\nCONSTANTS.boxWidth = boxWidthVar;\nCONSTANTS.offsetX = offsetVar;\n\nexport default CONSTANTS;\n","import CONSTANTS from \"./Constants\";\n\nconst FUNC = {\n    $(id) {\n        return CONSTANTS.dom.querySelector(id);\n    },\n\n    dd(text) {\n        $('dd').innerText = text;\n    },\n\n    vv(text) {\n        $('vv').innerText = text;\n    },\n\n    attach($object, $event, $handler) {\n        $object.addEventListener($event, $handler);\n    },\n\n    detach($object, $event, $handler) {\n        $object.removeEventListener($event, $handler)\n    },\n\n    /**\n     * @param divElement {HTMLElement}\n     * @param className {string}\n     */\n    addClass(divElement, className) {\n        divElement.classList.add(className)\n    },\n\n    /**\n     * @param divElement {HTMLElement}\n     * @param className {string}\n     */\n    removeClass(divElement, className) {\n        divElement.classList.remove(className)\n    },\n\n    setStyle($element, $style) {\n        for (let a in $style) {\n            $element.style[a] = $style[a]\n        }\n    },\n\n    elt($element, $classes, $id, $style) {\n        let elm = CONSTANTS.dom.createElement($element);\n        if ($classes) elm.className = $classes;\n        if ($id) elm.setAttribute('id', $id);\n        if ($style) this.setStyle(elm, $style)\n        return elm\n    }\n}\n\nconst $limit = 50;\nlet power = 2;\nconst powers = [1];\nfor (let i = 1; i <= $limit; i++) {\n    powers.push(power);\n    power *= 2;\n}\n\nFUNC.power = num => {\n    if (num <= $limit)\n        return powers[num];\n    throw new DOMException('num can\"t be more than ' + $limit);\n}\n\nexport default FUNC;","import Styler from \"../core/abstract/Styler\";\n\nexport default class RandomFigure extends Styler {\n    constructor({ figure, divElement, index }) {\n        super();\n        this.figure = figure;\n        this.divElement = divElement;\n        this.index = index;\n        this.locked = false;\n    }\n\n    getFigureName() {\n        return this.figure;\n    }\n\n    gitFigureIndex() {\n        return this.index;\n    }\n\n    getDivElement() {\n        return this.divElement;\n    }\n\n    lock() {\n        if (this.isLocked())\n            return;\n\n        this.locked = true;\n        this.style({ opacity: .5 });\n    }\n\n    unlock() {\n        if (!this.isLocked())\n            return;\n\n        this.locked = false;\n        this.style({ opacity: 1 })\n    }\n\n    isLocked() {\n        return this.locked === true;\n    }\n}","import FUNC from \"../general/Custom\";\nimport DomNegotiatorAbstract from \"../core/abstract/DomNegotiatorAbstract\";\nimport CONSTANTS from \"../general/Constants\";\n\nexport default class DomNegotiator extends DomNegotiatorAbstract {\n    /**\n     * @type {HTMLDivElement}\n     * @var _divElement\n     */\n\n    /**\n     * @param $element {HTMLElement|String}\n     */\n    constructor($element = null) {\n        super();\n\n        if ($element && typeof $element === 'string') {\n            $element = this.findOrCreate($element);\n        }\n\n        this.setElement($element);\n    }\n\n    findOrCreate($elementId) {\n        let element = FUNC.$($elementId);\n        if (!element) {\n            element = FUNC.elt('div', null, $elementId);\n            CONSTANTS.dom.body.append(element);\n        }\n        return element;\n    }\n\n    /**\n     * @param $element {HTMLElement|String}\n     */\n    setElement($element) {\n        this._divElement = $element;\n    }\n\n    getElement() {\n        return this._divElement;\n    }\n\n    /**\n     * @param $element {HTMLElement}\n     */\n    append($element) {\n        this.getElement().append($element)\n    }\n\n    clearHtml() {\n        this.getElement().innerHTML = \"\";\n    }\n}","import Box from \"./leaves/Box\";\nimport Calculator from \"../../core/math/Calculator\";\nimport EventHandler from \"../../core/abstract/EventHandler\";\nimport EVENTS from \"../../core/events/Events\";\n\nclass Boxes extends EventHandler {\n    /**\n     * @type {[]}\n     * @var _boxes\n     */\n    constructor() {\n        super();\n        this.reset();\n        this._cachedMatrix = this.toMatrix();\n    }\n\n    addRow() {\n        this._boxes.push([]);\n    }\n\n    addAt($i, { x, y }) {\n        this._boxes[$i].push(\n            new Box({ x, y })\n        );\n    }\n\n    /**\n     * @param i\n     * @param j\n     * @return {Box}\n     */\n    get(i, j) {\n        return this._boxes[i][j];\n    }\n\n    getBoxes() {\n        return this._boxes;\n    }\n\n    toString() {\n        let result = \"\";\n        this.getBoxes().forEach(row => {\n            /**\n             * @type {Box}\n             */\n            row.forEach(block => {\n                result += block.isBusy().toString();\n            })\n        });\n        return result;\n    }\n\n    toMatrix() {\n        const result = [];\n        this._boxes.forEach(row => {\n            result.push([]);\n            const curIndex = result.length - 1;\n            /**\n             * @type {Box}\n             */\n            row.forEach(box => {\n                result[curIndex].push(box.isBusy());\n            })\n        });\n\n        return result;\n    }\n\n    /**\n     * @param $childMatrix {Array[]}\n     * @param x {Number}\n     * @param y {Number}\n     * @param extraData {{\n     *     colorBox,\n     *     color,\n     * }}\n     */\n    updateMatrix($childMatrix, { x, y }, extraData = {}) {\n        $childMatrix.forEach((row, i) => {\n            row.forEach((cell, j) => {\n                if (Calculator.isset($childMatrix, i, j)) {\n                    const box = this.get(x + i, y + j);\n                    box.setBusy();\n\n                    if (this.hasHandler(EVENTS.BOX_UPDATE)) {\n                        this.getHandler(EVENTS.BOX_UPDATE).next({}, null, { x: x + i, y: y + j })\n                    }\n                }\n            })\n        });\n\n        if (this.hasHandler(EVENTS.BOARD_CHANGE)) {\n            this.getHandler(EVENTS.BOARD_CHANGE).next({}, null);\n        }\n    }\n\n    /**\n     * @param $string {String}\n     */\n    inverse($string) {\n        let result = \"\";\n        for (let c of $string) {\n            if (c === '0') {\n                result += '1';\n            } else {\n                result += '0';\n            }\n        }\n\n        return result;\n    }\n\n    reset() {\n        this._boxes = []\n    }\n}\n\nconst $boxes = new Boxes()\nexport default $boxes;","import Android from \"../../general/Android\";\n\nconst CONFIG = {\n    android: {\n        click: 'touchstart',\n        move: 'touchmove',\n        end: 'touchend'\n    },\n    ps: {\n        click: 'mousedown',\n        move: 'mousemove',\n        end: 'mouseup'\n    },\n    get(type) {\n        if (Android) {\n            if (!this.android[type]) {\n                throw new DOMException(`${type} is not defined`)\n            }\n            return this.android[type]\n        }\n        if (!this.ps[type]) {\n            throw new DOMException(`${type} is not defined`)\n        }\n        return this.ps[type];\n    },\n    coords(e) {\n        if (Android) {\n            return { x: e.touches[0].clientX, y: e.touches[0].clientY }\n        }\n        return { x: e.clientX, y: e.clientY }\n    },\n    getScreenWidth() {\n        if (Android) {\n            let ratio = window.devicePixelRatio || 1;\n            return screen.width * ratio;\n        }\n        return window.innerWidth;\n    },\n    getScreenHeight() {\n        if (Android) {\n            let ratio = window.devicePixelRatio || 1;\n            return screen.height * ratio;\n        }\n        return window.innerHeight\n    }\n}\n\nexport default CONFIG;","import FUNC from \"../../../general/Custom\";\n\nexport default class Box {\n    constructor({ x, y }) {\n        /**\n         * @types int\n         */\n        this.x = x;\n        this.y = y;\n\n        /**\n         *\n         * @type {HTMLElement}\n         */\n        this.referenceDiv = null;\n\n        this.data = {};\n    }\n\n    isBusy() {\n        if (this.data.busy) {\n            return 1;\n        }\n        return 0;\n    }\n\n    setBusy($state = true) {\n        this.data.busy = $state;\n    }\n\n    /**\n     * @param $div {HTMLElement}\n     */\n    setReferenceDiv($div) {\n        this.referenceDiv = $div;\n    }\n\n    getReferenceDiv() {\n        return this.referenceDiv;\n    }\n\n    /**\n     * @param $style {Object}\n     */\n    style($style) {\n        FUNC.setStyle(this.getReferenceDiv(), $style);\n        // console.log('got into style')\n    }\n\n    getCoordinateX() {\n        return this.x;\n    }\n\n    getCoordinateY() {\n        return this.y;\n    }\n\n\n}\n\n","import FUNC from \"../../../general/Custom\";\nimport RandomFigure from \"../../../leaves/RandomFigure\";\n\nconst STATE = {\n    shared: {\n        blockIndex: { x: null, y: null },\n        drawable: null,\n        setDrawable($state) {\n            this.drawable = $state;\n        },\n        isDrawable() {\n            return this.drawable;\n        },\n        setBlockIndexes({ x, y }) {\n            this.blockIndex = { x, y }\n        },\n        getBlockIndexes() {\n            return this.blockIndex;\n        },\n        resetDrawable() {\n            this.blockIndex = { x: null, y: null }\n            this.setDrawable(null);\n        }\n    },\n    relax: {\n        /**\n         * @type {RandomFigure[]}\n         */\n        randomFigures: [],\n        /**\n         * @type {RandomFigure[]}\n         */\n        cachedFigures: [],\n        /**\n         * @param figure {String} such as `TYPE_1`\n         * @param divElement {HTMLElement}\n         * @param index {Number}\n         */\n        addRandomFigure({ figure, divElement, index }) {\n            this.randomFigures.push(new RandomFigure({ figure, divElement, index }));\n        },\n        getFigures() {\n            return this.randomFigures;\n        },\n        /**\n         * @param index\n         * @return {RandomFigure}\n         */\n        getRandomFigure(index) {\n            return this.getFigures().find(figure => figure.index === index);\n        },\n        removeRandomFigure(figure, index) {\n            /**\n             * @type {RandomFigure}\n             */\n            const thisFigure = this.randomFigures.find(f => f.index === index);\n            FUNC.setStyle(thisFigure.getDivElement(), { visibility: \"hidden\"})\n            const figureIndex = this.randomFigures.findIndex(f => f.index === index);\n            this.randomFigures.splice(figureIndex, 1);\n            this.cachedFigures.push(thisFigure);\n        },\n        isAllFiguresDrawn() {\n            return this.randomFigures.length === 0;\n        },\n        clear() {\n            this.cachedFigures.forEach(figure => {\n                figure.getDivElement().remove();\n            });\n\n            this.cachedFigures = [];\n            this.randomFigures = [];\n        }\n    }\n}\n\nexport default STATE;","import $figures from \"../../../core/drawer/figures/Figures\";\nimport DomNegotiator from \"../../../negotiators/DomNegotiator\";\nimport FUNC from \"../../../general/Custom\";\nimport $boxes from \"../Boxes\";\n\nclass TmpFigureHelper extends DomNegotiator {\n    constructor() {\n        super('#tmp-element');\n    }\n\n    drawTmpFigure({ x, y }, figure) {\n        this.clearHtml();\n        const divElement = $figures.draw(figure, 1.02, { opacity: .3 });\n        this.append(divElement);\n\n        const box = $boxes.get(x, y);\n\n        FUNC.setStyle(this.getElement(), {\n            position: 'absolute',\n            left: box.getCoordinateX() + 'px',\n            top: box.getCoordinateY() + 'px',\n        });\n    }\n}\n\nconst $tmpFigureHelper = new TmpFigureHelper();\nexport default $tmpFigureHelper;","const userAgent = navigator.userAgent.toLowerCase();\nconst Android = userAgent.indexOf(\"android\") > -1;\n\nexport default Android;","import CONFIG from './store/config'\n\nexport const dom = document;\nexport const width = CONFIG.getScreenWidth() * .9;\nexport const height = CONFIG.getScreenHeight();\nexport const offsetY = height * 0.1 + 20;\nexport const boxesOnRow = 8;\nexport const boxesOnColumn = 8;\nexport const figureOffsetX = -70\nexport const figureOffsetY = -200\nexport const boxColor = 'rgba(153, 93, 93)';\nexport const blockCrashColor = 'rgb(151, 96, 96)';\n\nlet offsetX1 = 0;\nlet boxHeight1 = (height * .7) / boxesOnColumn;\nlet boxWidth1 = (width - offsetX1) / boxesOnRow\nboxWidth1 = boxHeight1 = Math.min(boxWidth1, boxHeight1);\n\nlet rightOffsetX = offsetX1 + boxesOnRow * boxWidth1\nrightOffsetX = width - rightOffsetX;\noffsetX1 = (offsetX1 + rightOffsetX) / 2 + 20;\n\nexport const boxHeight = boxHeight1\nexport const boxWidth = boxWidth1\nexport const offsetX = offsetX1","import Android from '../android'\n\nconst CONFIG = {\n    android: {\n        click: 'touchstart',\n        move: 'touchmove',\n        end: 'touchend'\n    },\n    ps: {\n        click: 'mousedown',\n        move: 'mousemove',\n        end: 'mouseup'\n    },\n    get(type) {\n        if (Android) {\n            if (!this.android[type]) {\n                throw new Exception(`${type} is not defined`)\n            }\n            return this.android[type]\n        }\n        if (!this.ps[type]) {\n            throw new Exception(`${type} is not defined`)\n        }\n        return this.ps[type];\n    },\n    coords(e) {\n        if (Android) {\n            return { x: e.touches[0].clientX, y: e.touches[0].clientY }\n        }\n        return { x: e.clientX, y: e.clientY }\n    },\n    getScreenWidth() {\n        if (Android) {\n            let ratio = window.devicePixelRatio || 1;\n            return screen.width * ratio;\n        }\n        return window.innerWidth;\n    },\n    getScreenHeight() {\n        if (Android) {\n            let ratio = window.devicePixelRatio || 1;\n            return screen.height * ratio;\n        }\n        return window.innerHeight\n    }\n}\n\nexport default CONFIG;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/app.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}